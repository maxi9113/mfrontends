{"ast":null,"code":"var _jsxFileName = \"/home/max-valeta/Documents/ALTO/react/mf-task/src/direflow-components/provider/index.js\";\nimport React from \"react\";\nimport { produce } from \"immer\";\nexport const TasksContext = React.createContext();\nconst initialState = {\n  loading: false,\n  error: false,\n  tasks: [],\n  stateOriginal: null,\n  index: null\n};\n\nfunction reducer(state, action) {\n  console.log(action.type);\n  let nextState = {};\n  if (action.type == \"UNDO\") nextState = { ...state.previousState\n  };else nextState = reducerImmer(state, action);\n  state = nextState;\n  return state;\n}\n\nconst reducerImmer = produce((draft, action) => {\n  switch (action.type) {\n    case 'GET':\n      draft.tasks = action.data;\n      break;\n\n    case 'INDEX':\n      draft.index = action.data;\n      break;\n\n    case 'DELETE':\n      draft.tasks.splice(action.data, 1);\n      break;\n\n    case 'ADD':\n      draft.tasks.push(action.data);\n      break;\n\n    case 'LOAD':\n      draft.loading = action.data;\n      break;\n\n    case 'ERROR':\n      draft.error = action.data;\n      break;\n\n    case 'UPDATE':\n      draft.tasks[draft.index] = { ...draft.tasks[draft.index],\n        ...action.data\n      };\n      break;\n\n    default:\n      break;\n  }\n});\n\nfunction Provider({\n  children\n}) {\n  const [state, dispatch] = React.useReducer(reducerImmer, initialState);\n  const value = {\n    tasks: state.tasks,\n    loading: state.loading,\n    error: state.error,\n    index: state.index,\n    previousState: state.previousState,\n    updateData: (data, type) => {\n      dispatch({\n        type: type,\n        data\n      });\n    }\n  };\n  return /*#__PURE__*/React.createElement(TasksContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nexport default Provider;","map":{"version":3,"sources":["/home/max-valeta/Documents/ALTO/react/mf-task/src/direflow-components/provider/index.js"],"names":["React","produce","TasksContext","createContext","initialState","loading","error","tasks","stateOriginal","index","reducer","state","action","console","log","type","nextState","previousState","reducerImmer","draft","data","splice","push","Provider","children","dispatch","useReducer","value","updateData"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,OAAO,MAAMC,YAAY,GAAGF,KAAK,CAACG,aAAN,EAArB;AAEP,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,KAAK,EAAG,KAFS;AAGjBC,EAAAA,KAAK,EAAE,EAHU;AAIjBC,EAAAA,aAAa,EAAG,IAJC;AAKjBC,EAAAA,KAAK,EAAE;AALU,CAArB;;AAQA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;AACA,MAAIC,SAAS,GAAI,EAAjB;AACA,MAAGJ,MAAM,CAACG,IAAP,IAAe,MAAlB,EACIC,SAAS,GAAG,EAAC,GAAGL,KAAK,CAACM;AAAV,GAAZ,CADJ,KAGID,SAAS,GAAGE,YAAY,CAACP,KAAD,EAAOC,MAAP,CAAxB;AAEJD,EAAAA,KAAK,GAAGK,SAAR;AACA,SAAOL,KAAP;AACH;;AAED,MAAMO,YAAY,GAAGjB,OAAO,CAAC,CAACkB,KAAD,EAAQP,MAAR,KAAmB;AAE5C,UAAQA,MAAM,CAACG,IAAf;AACI,SAAK,KAAL;AACII,MAAAA,KAAK,CAACZ,KAAN,GAAcK,MAAM,CAACQ,IAArB;AACF;;AACF,SAAK,OAAL;AACID,MAAAA,KAAK,CAACV,KAAN,GAAcG,MAAM,CAACQ,IAArB;AACF;;AACF,SAAK,QAAL;AACID,MAAAA,KAAK,CAACZ,KAAN,CAAYc,MAAZ,CAAmBT,MAAM,CAACQ,IAA1B,EAA+B,CAA/B;AACF;;AACF,SAAK,KAAL;AACID,MAAAA,KAAK,CAACZ,KAAN,CAAYe,IAAZ,CAAiBV,MAAM,CAACQ,IAAxB;AACF;;AACF,SAAK,MAAL;AACID,MAAAA,KAAK,CAACd,OAAN,GAAgBO,MAAM,CAACQ,IAAvB;AACF;;AACF,SAAK,OAAL;AACID,MAAAA,KAAK,CAACb,KAAN,GAAcM,MAAM,CAACQ,IAArB;AACF;;AACF,SAAK,QAAL;AACID,MAAAA,KAAK,CAACZ,KAAN,CAAYY,KAAK,CAACV,KAAlB,IAA2B,EACvB,GAAGU,KAAK,CAACZ,KAAN,CAAYY,KAAK,CAACV,KAAlB,CADoB;AAEvB,WAAGG,MAAM,CAACQ;AAFa,OAA3B;AAIF;;AACF;AACI;AA1BR;AA8BH,CAhC2B,CAA5B;;AAkCA,SAASG,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAC5B,QAAM,CAACb,KAAD,EAAQc,QAAR,IAAoBzB,KAAK,CAAC0B,UAAN,CAAiBR,YAAjB,EAA+Bd,YAA/B,CAA1B;AACA,QAAMuB,KAAK,GAAG;AACVpB,IAAAA,KAAK,EAAGI,KAAK,CAACJ,KADJ;AAEVF,IAAAA,OAAO,EAAGM,KAAK,CAACN,OAFN;AAGVC,IAAAA,KAAK,EAAEK,KAAK,CAACL,KAHH;AAIVG,IAAAA,KAAK,EAAGE,KAAK,CAACF,KAJJ;AAKVQ,IAAAA,aAAa,EAAGN,KAAK,CAACM,aALZ;AAMVW,IAAAA,UAAU,EAAE,CAACR,IAAD,EAAML,IAAN,KAAe;AACvBU,MAAAA,QAAQ,CAAC;AAAEV,QAAAA,IAAI,EAAEA,IAAR;AAAcK,QAAAA;AAAd,OAAD,CAAR;AACH;AARS,GAAd;AAWA,sBACA,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAGO,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,QADL,CADA;AAMH;;AACD,eAAeD,QAAf","sourcesContent":["import React from \"react\";\nimport {produce} from \"immer\"\nexport const TasksContext = React.createContext();\n\nconst initialState = {\n    loading: false,\n    error : false,   \n    tasks: [],\n    stateOriginal : null,\n    index: null\n};\n\nfunction reducer(state, action) { \n    console.log(action.type)\n    let nextState =  {} ;\n    if(action.type == \"UNDO\")\n        nextState = {...state.previousState}  \n    else \n        nextState = reducerImmer(state,action);     \n\n    state = nextState;\n    return state; \n}\n\nconst reducerImmer = produce((draft, action) => {\n    \n    switch (action.type) {\n        case 'GET':            \n            draft.tasks = action.data;\n          break;\n        case 'INDEX':\n            draft.index = action.data;\n          break;\n        case 'DELETE':\n            draft.tasks.splice(action.data,1);\n          break;\n        case 'ADD':\n            draft.tasks.push(action.data);\n          break;\n        case 'LOAD':\n            draft.loading = action.data;\n          break;\n        case 'ERROR':\n            draft.error = action.data;\n          break;\n        case 'UPDATE':\n            draft.tasks[draft.index] = {\n                ...draft.tasks[draft.index],\n                ...action.data            \n            };            \n          break;\n        default:\n            break;\n    }\n  \n \n});\n\nfunction Provider({ children }) {\n    const [state, dispatch] = React.useReducer(reducerImmer, initialState);\n    const value = {\n        tasks : state.tasks,\n        loading : state.loading,\n        error: state.error,\n        index : state.index,\n        previousState : state.previousState,\n        updateData: (data,type) => {\n            dispatch({ type: type, data });\n        }\n    };\n\n    return ( \n    <TasksContext.Provider value ={value}> \n        {children} \n    </TasksContext.Provider>\n    );\n\n}\nexport default Provider"]},"metadata":{},"sourceType":"module"}