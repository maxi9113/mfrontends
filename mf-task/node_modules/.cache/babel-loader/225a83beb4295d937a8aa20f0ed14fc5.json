{"ast":null,"code":"/* eslint-disable class-methods-use-this */\n\n/* eslint-disable max-classes-per-file */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport clonedeep from 'lodash.clonedeep';\nimport createProxyRoot from './helpers/proxyRoot';\nimport { EventProvider } from './components/EventContext';\nimport registeredPlugins from './plugins/plugins';\n\nclass WebComponentFactory {\n  constructor(componentProperties, rootComponent, shadow, plugins, connectCallback) {\n    this.componentProperties = componentProperties;\n    this.rootComponent = rootComponent;\n    this.shadow = shadow;\n    this.plugins = plugins;\n    this.connectCallback = connectCallback;\n    this.componentAttributes = {};\n    this.reflectPropertiesToAttributes();\n  }\n  /**\n   * All properties with primitive values are added to attributes.\n   */\n\n\n  reflectPropertiesToAttributes() {\n    Object.entries(this.componentProperties).forEach(([key, value]) => {\n      if (typeof value !== 'number' && typeof value !== 'string' && typeof value !== 'boolean') {\n        return;\n      }\n\n      this.componentAttributes[key] = value;\n    });\n  }\n  /**\n   * Create new class that will serve as the Web Component.\n   */\n\n\n  create() {\n    const factory = this;\n    return class WebComponent extends HTMLElement {\n      constructor() {\n        super();\n        this.initialProperties = clonedeep(factory.componentProperties);\n        this.properties = {};\n        this.hasConnected = false;\n        /**\n         * Dispatch an event from the Web Component\n         */\n\n        this.eventDispatcher = event => {\n          this.dispatchEvent(event);\n        };\n\n        this.transferInitialProperties();\n        this.subscribeToProperties();\n      }\n      /**\n       * Observe attributes for changes.\n       * Part of the Web Component Standard.\n       */\n\n\n      static get observedAttributes() {\n        return Object.keys(factory.componentAttributes).map(k => k.toLowerCase());\n      }\n      /**\n       * Web Component gets mounted on the DOM.\n       */\n\n\n      connectedCallback() {\n        var _a, _b;\n\n        this.mountReactApp({\n          initial: true\n        });\n        this.hasConnected = true;\n        (_b = (_a = factory).connectCallback) === null || _b === void 0 ? void 0 : _b.call(_a, this);\n      }\n      /**\n       * When an attribute is changed, this callback function is called.\n       * @param name name of the attribute\n       * @param oldValue value before change\n       * @param newValue value after change\n       */\n\n\n      attributeChangedCallback(name, oldValue, newValue) {\n        if (!this.hasConnected) {\n          return;\n        }\n\n        if (oldValue === newValue) {\n          return;\n        }\n\n        this.properties[name] = newValue;\n        this.mountReactApp();\n      }\n      /**\n       * When a property is changed, this callback function is called.\n       * @param name name of the property\n       * @param oldValue value before change\n       * @param newValue value after change\n       */\n\n\n      propertyChangedCallback(name, oldValue, newValue) {\n        if (!this.hasConnected) {\n          return;\n        }\n\n        if (oldValue === newValue) {\n          return;\n        }\n\n        this.properties[name] = newValue;\n        this.mountReactApp();\n      }\n      /**\n       * Web Component gets unmounted from the DOM.\n       */\n\n\n      disconnectedCallback() {\n        ReactDOM.unmountComponentAtNode(this);\n      }\n      /**\n       * Setup getters and setters for all properties.\n       * Here we ensure that the 'propertyChangedCallback' will get invoked\n       * when a property changes.\n       */\n\n\n      subscribeToProperties() {\n        const propertyMap = {};\n        Object.keys(this.initialProperties).forEach(key => {\n          propertyMap[key] = {\n            configurable: true,\n            enumerable: true,\n            get: () => {\n              const currentValue = this.properties.hasOwnProperty(key) ? this.properties[key] : this.initialProperties[key];\n              return currentValue;\n            },\n            set: newValue => {\n              const oldValue = this.properties.hasOwnProperty(key) ? this.properties[key] : this.initialProperties[key];\n              this.propertyChangedCallback(key, oldValue, newValue);\n            }\n          };\n        });\n        Object.defineProperties(this, propertyMap);\n      }\n      /**\n       * Syncronize all properties and attributes\n       */\n\n\n      syncronizePropertiesAndAttributes() {\n        Object.keys(this.initialProperties).forEach(key => {\n          if (this.properties.hasOwnProperty(key)) {\n            return;\n          }\n\n          if (this.getAttribute(key)) {\n            this.properties[key] = this.getAttribute(key);\n            return;\n          }\n\n          this.properties[key] = this.initialProperties[key];\n        });\n      }\n      /**\n       * Transfer initial properties from the custom element.\n       */\n\n\n      transferInitialProperties() {\n        Object.keys(this.initialProperties).forEach(key => {\n          if (this.hasOwnProperty(key)) {\n            this.properties[key] = this[key];\n          }\n        });\n      }\n      /**\n       * Apply plugins\n       */\n\n\n      applyPlugins(application) {\n        const shadowChildren = [];\n        const applicationWithPlugins = registeredPlugins.reduce((app, currentPlugin) => {\n          const pluginResult = currentPlugin(this, factory.plugins, app);\n\n          if (!pluginResult) {\n            return app;\n          }\n\n          const [wrapper, shadowChild] = pluginResult;\n\n          if (shadowChild) {\n            shadowChildren.push(shadowChild);\n          }\n\n          return wrapper;\n        }, application);\n        return [applicationWithPlugins, shadowChildren];\n      }\n      /**\n       * Generate react props based on properties and attributes.\n       */\n\n\n      reactProps() {\n        this.syncronizePropertiesAndAttributes();\n        return this.properties;\n      }\n      /**\n       * Mount React App onto the Web Component\n       */\n\n\n      mountReactApp(options) {\n        var _a;\n\n        const application = React.createElement(EventProvider, {\n          value: this.eventDispatcher\n        }, React.createElement(factory.rootComponent, this.reactProps()));\n        const [applicationWithPlugins, shadowChildren] = this.applyPlugins(application);\n\n        if (!factory.shadow) {\n          ReactDOM.render(applicationWithPlugins, this);\n          return;\n        }\n\n        let currentChildren;\n\n        if ((_a = options) === null || _a === void 0 ? void 0 : _a.initial) {\n          currentChildren = Array.from(this.children).map(child => child.cloneNode(true));\n        }\n\n        const root = createProxyRoot(this, shadowChildren);\n        ReactDOM.render(React.createElement(root.open, null, applicationWithPlugins), this);\n\n        if (currentChildren) {\n          currentChildren.forEach(child => this.append(child));\n        }\n      }\n\n    };\n  }\n\n}\n\nexport default WebComponentFactory;","map":{"version":3,"sources":["/home/max-valeta/Documents/ALTO/react/container-mfs/public/mf-task/node_modules/direflow-component/dist/WebComponentFactory.js"],"names":["React","ReactDOM","clonedeep","createProxyRoot","EventProvider","registeredPlugins","WebComponentFactory","constructor","componentProperties","rootComponent","shadow","plugins","connectCallback","componentAttributes","reflectPropertiesToAttributes","Object","entries","forEach","key","value","create","factory","WebComponent","HTMLElement","initialProperties","properties","hasConnected","eventDispatcher","event","dispatchEvent","transferInitialProperties","subscribeToProperties","observedAttributes","keys","map","k","toLowerCase","connectedCallback","_a","_b","mountReactApp","initial","call","attributeChangedCallback","name","oldValue","newValue","propertyChangedCallback","disconnectedCallback","unmountComponentAtNode","propertyMap","configurable","enumerable","get","currentValue","hasOwnProperty","set","defineProperties","syncronizePropertiesAndAttributes","getAttribute","applyPlugins","application","shadowChildren","applicationWithPlugins","reduce","app","currentPlugin","pluginResult","wrapper","shadowChild","push","reactProps","options","createElement","render","currentChildren","Array","from","children","child","cloneNode","root","open","append"],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport clonedeep from 'lodash.clonedeep';\nimport createProxyRoot from './helpers/proxyRoot';\nimport { EventProvider } from './components/EventContext';\nimport registeredPlugins from './plugins/plugins';\nclass WebComponentFactory {\n    constructor(componentProperties, rootComponent, shadow, plugins, connectCallback) {\n        this.componentProperties = componentProperties;\n        this.rootComponent = rootComponent;\n        this.shadow = shadow;\n        this.plugins = plugins;\n        this.connectCallback = connectCallback;\n        this.componentAttributes = {};\n        this.reflectPropertiesToAttributes();\n    }\n    /**\n     * All properties with primitive values are added to attributes.\n     */\n    reflectPropertiesToAttributes() {\n        Object.entries(this.componentProperties).forEach(([key, value]) => {\n            if (typeof value !== 'number' && typeof value !== 'string' && typeof value !== 'boolean') {\n                return;\n            }\n            this.componentAttributes[key] = value;\n        });\n    }\n    /**\n     * Create new class that will serve as the Web Component.\n     */\n    create() {\n        const factory = this;\n        return class WebComponent extends HTMLElement {\n            constructor() {\n                super();\n                this.initialProperties = clonedeep(factory.componentProperties);\n                this.properties = {};\n                this.hasConnected = false;\n                /**\n                 * Dispatch an event from the Web Component\n                 */\n                this.eventDispatcher = (event) => {\n                    this.dispatchEvent(event);\n                };\n                this.transferInitialProperties();\n                this.subscribeToProperties();\n            }\n            /**\n             * Observe attributes for changes.\n             * Part of the Web Component Standard.\n             */\n            static get observedAttributes() {\n                return Object.keys(factory.componentAttributes).map((k) => k.toLowerCase());\n            }\n            /**\n             * Web Component gets mounted on the DOM.\n             */\n            connectedCallback() {\n                var _a, _b;\n                this.mountReactApp({ initial: true });\n                this.hasConnected = true;\n                (_b = (_a = factory).connectCallback) === null || _b === void 0 ? void 0 : _b.call(_a, this);\n            }\n            /**\n             * When an attribute is changed, this callback function is called.\n             * @param name name of the attribute\n             * @param oldValue value before change\n             * @param newValue value after change\n             */\n            attributeChangedCallback(name, oldValue, newValue) {\n                if (!this.hasConnected) {\n                    return;\n                }\n                if (oldValue === newValue) {\n                    return;\n                }\n                this.properties[name] = newValue;\n                this.mountReactApp();\n            }\n            /**\n             * When a property is changed, this callback function is called.\n             * @param name name of the property\n             * @param oldValue value before change\n             * @param newValue value after change\n             */\n            propertyChangedCallback(name, oldValue, newValue) {\n                if (!this.hasConnected) {\n                    return;\n                }\n                if (oldValue === newValue) {\n                    return;\n                }\n                this.properties[name] = newValue;\n                this.mountReactApp();\n            }\n            /**\n             * Web Component gets unmounted from the DOM.\n             */\n            disconnectedCallback() {\n                ReactDOM.unmountComponentAtNode(this);\n            }\n            /**\n             * Setup getters and setters for all properties.\n             * Here we ensure that the 'propertyChangedCallback' will get invoked\n             * when a property changes.\n             */\n            subscribeToProperties() {\n                const propertyMap = {};\n                Object.keys(this.initialProperties).forEach((key) => {\n                    propertyMap[key] = {\n                        configurable: true,\n                        enumerable: true,\n                        get: () => {\n                            const currentValue = this.properties.hasOwnProperty(key)\n                                ? this.properties[key]\n                                : this.initialProperties[key];\n                            return currentValue;\n                        },\n                        set: (newValue) => {\n                            const oldValue = this.properties.hasOwnProperty(key)\n                                ? this.properties[key]\n                                : this.initialProperties[key];\n                            this.propertyChangedCallback(key, oldValue, newValue);\n                        },\n                    };\n                });\n                Object.defineProperties(this, propertyMap);\n            }\n            /**\n             * Syncronize all properties and attributes\n             */\n            syncronizePropertiesAndAttributes() {\n                Object.keys(this.initialProperties).forEach((key) => {\n                    if (this.properties.hasOwnProperty(key)) {\n                        return;\n                    }\n                    if (this.getAttribute(key)) {\n                        this.properties[key] = this.getAttribute(key);\n                        return;\n                    }\n                    this.properties[key] = this.initialProperties[key];\n                });\n            }\n            /**\n             * Transfer initial properties from the custom element.\n             */\n            transferInitialProperties() {\n                Object.keys(this.initialProperties).forEach((key) => {\n                    if (this.hasOwnProperty(key)) {\n                        this.properties[key] = this[key];\n                    }\n                });\n            }\n            /**\n             * Apply plugins\n             */\n            applyPlugins(application) {\n                const shadowChildren = [];\n                const applicationWithPlugins = registeredPlugins.reduce((app, currentPlugin) => {\n                    const pluginResult = currentPlugin(this, factory.plugins, app);\n                    if (!pluginResult) {\n                        return app;\n                    }\n                    const [wrapper, shadowChild] = pluginResult;\n                    if (shadowChild) {\n                        shadowChildren.push(shadowChild);\n                    }\n                    return wrapper;\n                }, application);\n                return [applicationWithPlugins, shadowChildren];\n            }\n            /**\n             * Generate react props based on properties and attributes.\n             */\n            reactProps() {\n                this.syncronizePropertiesAndAttributes();\n                return this.properties;\n            }\n            /**\n             * Mount React App onto the Web Component\n             */\n            mountReactApp(options) {\n                var _a;\n                const application = (React.createElement(EventProvider, { value: this.eventDispatcher }, React.createElement(factory.rootComponent, this.reactProps())));\n                const [applicationWithPlugins, shadowChildren] = this.applyPlugins(application);\n                if (!factory.shadow) {\n                    ReactDOM.render(applicationWithPlugins, this);\n                    return;\n                }\n                let currentChildren;\n                if ((_a = options) === null || _a === void 0 ? void 0 : _a.initial) {\n                    currentChildren = Array.from(this.children).map((child) => child.cloneNode(true));\n                }\n                const root = createProxyRoot(this, shadowChildren);\n                ReactDOM.render(React.createElement(root.open, null, applicationWithPlugins), this);\n                if (currentChildren) {\n                    currentChildren.forEach((child) => this.append(child));\n                }\n            }\n        };\n    }\n}\nexport default WebComponentFactory;\n"]},"metadata":{},"sourceType":"module"}