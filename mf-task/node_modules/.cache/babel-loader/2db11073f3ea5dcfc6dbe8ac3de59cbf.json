{"ast":null,"code":"import React from 'react';\nimport { createPortal } from 'react-dom';\n\nvar Portal = function Portal(props) {\n  var targetElement = props.targetElement;\n  return createPortal(props.children, targetElement);\n};\n\nvar createProxyComponent = function createProxyComponent(options) {\n  var ShadowRoot = function ShadowRoot(props) {\n    var shadowedRoot = options.webComponent.shadowRoot || options.webComponent.attachShadow({\n      mode: options.mode\n    });\n    options.shadowChildren.forEach(function (child) {\n      shadowedRoot.appendChild(child);\n    });\n    return React.createElement(Portal, {\n      targetElement: shadowedRoot\n    }, props.children);\n  };\n\n  return ShadowRoot;\n};\n\nvar componentMap = new WeakMap();\n\nvar createProxyRoot = function createProxyRoot(webComponent, shadowChildren) {\n  return new Proxy({\n    open: null,\n    closed: null\n  }, {\n    get: function get(_, mode) {\n      if (componentMap.get(webComponent)) {\n        return componentMap.get(webComponent);\n      }\n\n      var proxyComponent = createProxyComponent({\n        webComponent: webComponent,\n        mode: mode,\n        shadowChildren: shadowChildren\n      });\n      componentMap.set(webComponent, proxyComponent);\n      return proxyComponent;\n    }\n  });\n};\n\nexport default createProxyRoot;","map":{"version":3,"sources":["/home/max-valeta/Documents/ALTO/react/container-mfs/mf-task/node_modules/direflow-component/dist/helpers/proxyRoot.js"],"names":["React","createPortal","Portal","props","targetElement","children","createProxyComponent","options","ShadowRoot","shadowedRoot","webComponent","shadowRoot","attachShadow","mode","shadowChildren","forEach","child","appendChild","createElement","componentMap","WeakMap","createProxyRoot","Proxy","open","closed","get","_","proxyComponent","set"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,WAA7B;;AACA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAW;AACtB,MAAMC,aAAa,GAAGD,KAAK,CAACC,aAA5B;AACA,SAAOH,YAAY,CAACE,KAAK,CAACE,QAAP,EAAiBD,aAAjB,CAAnB;AACH,CAHD;;AAIA,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,OAAD,EAAa;AACtC,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACL,KAAD,EAAW;AAC1B,QAAMM,YAAY,GAAGF,OAAO,CAACG,YAAR,CAAqBC,UAArB,IACdJ,OAAO,CAACG,YAAR,CAAqBE,YAArB,CAAkC;AAAEC,MAAAA,IAAI,EAAEN,OAAO,CAACM;AAAhB,KAAlC,CADP;AAEAN,IAAAA,OAAO,CAACO,cAAR,CAAuBC,OAAvB,CAA+B,UAACC,KAAD,EAAW;AACtCP,MAAAA,YAAY,CAACQ,WAAb,CAAyBD,KAAzB;AACH,KAFD;AAGA,WAAOhB,KAAK,CAACkB,aAAN,CAAoBhB,MAApB,EAA4B;AAAEE,MAAAA,aAAa,EAAEK;AAAjB,KAA5B,EAA6DN,KAAK,CAACE,QAAnE,CAAP;AACH,GAPD;;AAQA,SAAOG,UAAP;AACH,CAVD;;AAWA,IAAMW,YAAY,GAAG,IAAIC,OAAJ,EAArB;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACX,YAAD,EAAeI,cAAf,EAAkC;AACtD,SAAO,IAAIQ,KAAJ,CAAU;AAAEC,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAV,EAAwC;AAC3CC,IAAAA,GAD2C,eACvCC,CADuC,EACpCb,IADoC,EAC9B;AACT,UAAIM,YAAY,CAACM,GAAb,CAAiBf,YAAjB,CAAJ,EAAoC;AAChC,eAAOS,YAAY,CAACM,GAAb,CAAiBf,YAAjB,CAAP;AACH;;AACD,UAAMiB,cAAc,GAAGrB,oBAAoB,CAAC;AAAEI,QAAAA,YAAY,EAAZA,YAAF;AAAgBG,QAAAA,IAAI,EAAJA,IAAhB;AAAsBC,QAAAA,cAAc,EAAdA;AAAtB,OAAD,CAA3C;AACAK,MAAAA,YAAY,CAACS,GAAb,CAAiBlB,YAAjB,EAA+BiB,cAA/B;AACA,aAAOA,cAAP;AACH;AAR0C,GAAxC,CAAP;AAUH,CAXD;;AAYA,eAAeN,eAAf","sourcesContent":["import React from 'react';\nimport { createPortal } from 'react-dom';\nconst Portal = (props) => {\n    const targetElement = props.targetElement;\n    return createPortal(props.children, targetElement);\n};\nconst createProxyComponent = (options) => {\n    const ShadowRoot = (props) => {\n        const shadowedRoot = options.webComponent.shadowRoot\n            || options.webComponent.attachShadow({ mode: options.mode });\n        options.shadowChildren.forEach((child) => {\n            shadowedRoot.appendChild(child);\n        });\n        return React.createElement(Portal, { targetElement: shadowedRoot }, props.children);\n    };\n    return ShadowRoot;\n};\nconst componentMap = new WeakMap();\nconst createProxyRoot = (webComponent, shadowChildren) => {\n    return new Proxy({ open: null, closed: null }, {\n        get(_, mode) {\n            if (componentMap.get(webComponent)) {\n                return componentMap.get(webComponent);\n            }\n            const proxyComponent = createProxyComponent({ webComponent, mode, shadowChildren });\n            componentMap.set(webComponent, proxyComponent);\n            return proxyComponent;\n        },\n    });\n};\nexport default createProxyRoot;\n"]},"metadata":{},"sourceType":"module"}