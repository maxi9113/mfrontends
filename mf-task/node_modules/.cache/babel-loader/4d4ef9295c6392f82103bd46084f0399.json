{"ast":null,"code":"const asyncScriptLoader = (src, bundleListKey) => {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    script.async = true;\n    script.src = src;\n\n    if (!window[bundleListKey]) {\n      window[bundleListKey] = [];\n    }\n\n    const existingPolyfill = window[bundleListKey].find(loadedScript => {\n      return loadedScript.script.isEqualNode(script);\n    });\n\n    if (existingPolyfill) {\n      if (existingPolyfill.hasLoaded) {\n        resolve();\n      }\n\n      existingPolyfill.script.addEventListener('load', () => resolve());\n      return;\n    }\n\n    const scriptEntry = {\n      script,\n      hasLoaded: false\n    };\n    window[bundleListKey].push(scriptEntry);\n    script.addEventListener('load', () => {\n      scriptEntry.hasLoaded = true;\n      resolve();\n    });\n    script.addEventListener('error', () => reject(new Error('Polyfill failed to load')));\n    document.head.appendChild(script);\n  });\n};\n\nexport default asyncScriptLoader;","map":{"version":3,"sources":["/home/max-valeta/Documents/ALTO/react/container-mfs/public/mf-task/node_modules/direflow-component/dist/helpers/asyncScriptLoader.js"],"names":["asyncScriptLoader","src","bundleListKey","Promise","resolve","reject","script","document","createElement","async","window","existingPolyfill","find","loadedScript","isEqualNode","hasLoaded","addEventListener","scriptEntry","push","Error","head","appendChild"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,CAACC,GAAD,EAAMC,aAAN,KAAwB;AAC9C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,IAAAA,MAAM,CAACG,KAAP,GAAe,IAAf;AACAH,IAAAA,MAAM,CAACL,GAAP,GAAaA,GAAb;;AACA,QAAI,CAACS,MAAM,CAACR,aAAD,CAAX,EAA4B;AACxBQ,MAAAA,MAAM,CAACR,aAAD,CAAN,GAAwB,EAAxB;AACH;;AACD,UAAMS,gBAAgB,GAAGD,MAAM,CAACR,aAAD,CAAN,CAAsBU,IAAtB,CAA4BC,YAAD,IAAkB;AAClE,aAAOA,YAAY,CAACP,MAAb,CAAoBQ,WAApB,CAAgCR,MAAhC,CAAP;AACH,KAFwB,CAAzB;;AAGA,QAAIK,gBAAJ,EAAsB;AAClB,UAAIA,gBAAgB,CAACI,SAArB,EAAgC;AAC5BX,QAAAA,OAAO;AACV;;AACDO,MAAAA,gBAAgB,CAACL,MAAjB,CAAwBU,gBAAxB,CAAyC,MAAzC,EAAiD,MAAMZ,OAAO,EAA9D;AACA;AACH;;AACD,UAAMa,WAAW,GAAG;AAChBX,MAAAA,MADgB;AAEhBS,MAAAA,SAAS,EAAE;AAFK,KAApB;AAIAL,IAAAA,MAAM,CAACR,aAAD,CAAN,CAAsBgB,IAAtB,CAA2BD,WAA3B;AACAX,IAAAA,MAAM,CAACU,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AAClCC,MAAAA,WAAW,CAACF,SAAZ,GAAwB,IAAxB;AACAX,MAAAA,OAAO;AACV,KAHD;AAIAE,IAAAA,MAAM,CAACU,gBAAP,CAAwB,OAAxB,EAAiC,MAAMX,MAAM,CAAC,IAAIc,KAAJ,CAAU,yBAAV,CAAD,CAA7C;AACAZ,IAAAA,QAAQ,CAACa,IAAT,CAAcC,WAAd,CAA0Bf,MAA1B;AACH,GA5BM,CAAP;AA6BH,CA9BD;;AA+BA,eAAeN,iBAAf","sourcesContent":["const asyncScriptLoader = (src, bundleListKey) => {\n    return new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        script.async = true;\n        script.src = src;\n        if (!window[bundleListKey]) {\n            window[bundleListKey] = [];\n        }\n        const existingPolyfill = window[bundleListKey].find((loadedScript) => {\n            return loadedScript.script.isEqualNode(script);\n        });\n        if (existingPolyfill) {\n            if (existingPolyfill.hasLoaded) {\n                resolve();\n            }\n            existingPolyfill.script.addEventListener('load', () => resolve());\n            return;\n        }\n        const scriptEntry = {\n            script,\n            hasLoaded: false,\n        };\n        window[bundleListKey].push(scriptEntry);\n        script.addEventListener('load', () => {\n            scriptEntry.hasLoaded = true;\n            resolve();\n        });\n        script.addEventListener('error', () => reject(new Error('Polyfill failed to load')));\n        document.head.appendChild(script);\n    });\n};\nexport default asyncScriptLoader;\n"]},"metadata":{},"sourceType":"module"}