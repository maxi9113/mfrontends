import { Component } from 'react';
interface IProps {
    scoped?: boolean;
}
declare class Style extends Component<IProps> {
    private scopeClassNameCache;
    private scopedCSSTextCache;
    private scoped;
    private pepper;
    getStyleString: () => {} | null | undefined;
    getRootElement: () => {} | null | undefined;
    getRootSelectors: (rootElement: any) => any[];
    processCSSText: (styleString: any, scopeClassName?: string | undefined, rootSelectors?: any[] | undefined) => any;
    escaper: (match: any) => string;
    escapeTextContentForBrowser: (text: string) => string;
    scopeSelector: (scopeClassName: string, selector: string, rootSelectors?: any[] | undefined) => string;
    getScopeClassName: (styleString: any, rootElement: any) => string;
    traverseObjectToGeneratePepper: (obj: any, depth?: number) => void;
    isVoidElement: (type: string) => boolean;
    createStyleElement: (cssText: string, scopeClassName: string) => JSX.Element;
    getNewChildrenForCloneElement: (cssText: string, rootElement: JSX.Element, scopeClassName: string) => JSX.Element[];
    render(): any;
}
export default Style;
