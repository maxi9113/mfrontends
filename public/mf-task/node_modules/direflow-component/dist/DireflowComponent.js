var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import WebComponentFactory from './WebComponentFactory';
import includePolyfills from './helpers/polyfillHandler';
class DireflowComponent {
    /**
     * Create muliple Direflow Components
     * @param App React Component
     */
    static createAll(componentConfigs) {
        return componentConfigs.map(DireflowComponent.create);
    }
    /**
     * Create Direflow Component
     * @param App React Component
     */
    static create(componentConfig) {
        var _a;
        const { component } = componentConfig;
        const plugins = component.plugins || componentConfig.plugins;
        const configuration = component.configuration || componentConfig.configuration;
        if (!component) {
            throw Error('Root component has not been set');
        }
        if (!configuration) {
            throw Error('No configuration found');
        }
        const componentProperties = Object.assign(Object.assign(Object.assign({}, (_a = componentConfig) === null || _a === void 0 ? void 0 : _a.properties), component.properties), component.defaultProps);
        const tagName = configuration.tagname || 'direflow-component';
        const shadow = configuration.useShadow !== undefined ? configuration.useShadow : true;
        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const callback = (element) => {
                resolve(element);
            };
            yield Promise.all([includePolyfills({ usesShadow: !!shadow }, plugins)]);
            const WebComponent = new WebComponentFactory(componentProperties, component, shadow, plugins, callback).create();
            customElements.define(tagName || '', WebComponent);
        }));
    }
}
export default DireflowComponent;
